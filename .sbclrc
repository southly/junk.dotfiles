;;;; -*- Mode: LISP; Syntax: COMMON-LISP; indent-tabs-mode: nil -*-
;;;  $Id$
;(load (merge-pathnames "local/share/common-lisp/source/asdf/asdf.lisp" (user-homedir-pathname)))
;(compile-file (merge-pathnames "local/share/common-lisp/source/asdf/asdf.lisp" (user-homedir-pathname)))

(require :asdf)
(push (merge-pathnames "local/share/common-lisp/systems/" (user-homedir-pathname)) asdf:*central-registry*)
(require :asdf-install)
(pushnew (list (merge-pathnames "local/share/common-lisp/source/" (user-homedir-pathname))
               (merge-pathnames "local/share/common-lisp/systems/" (user-homedir-pathname))
               "Common install")
         asdf-install:*locations*
         :test #'equal)
;(setf asdf-install::*verify-gpg-signatures* nil)
(defparameter asdf-install-customize::*verify-gpg-signatures* nil)

(asdf:oos 'asdf:load-op :swank)

(load (merge-pathnames "local/share/common-lisp/source/asdf-addons/asdf-cache.lisp" (user-homedir-pathname)))
;(compile-file (merge-pathnames "local/share/common-lisp/source/asdf-addons/asdf-cache.lisp" (user-homedir-pathname)))
(setf asdf-cache:*asdf-cache* (merge-pathnames "local/var/cache/common-lisp/" (user-homedir-pathname)))

#+sbcl (setq sb-impl::*default-external-format* :utf-8)

(asdf:oos 'asdf:load-op :cl-fad)
(asdf:oos 'asdf:load-op :jp)

(defun asdf-installed-list ()
  (dolist (i asdf:*central-registry*)
    (dolist (j (cl-fad:list-directory (if (or (pathnamep i) (stringp i)) 
                                        i
                                        (eval i))))
      (when (equalp "asd" (pathname-type j))
        (format t "~A~%" (pathname-name j)))))
  (values))

;;; If the first user-processable command-line argument is a filename,
;;; disable the debugger, load the file handling shebang-line and quit.
(let ((script (and (second *posix-argv*)
                   (probe-file (second *posix-argv*)))))
  (when script
    ;; Handle shebang-line
    (set-dispatch-macro-character #\# #\!
                                  (lambda (stream char arg)
                                    (declare (ignore char arg))
                                    (read-line stream)))
    ;; Disable debugger
    (setf *invoke-debugger-hook*
          (lambda (condition hook)
            (declare (ignore hook))
            ;; Uncomment to get backtraces on errors
            ;; (sb-debug:backtrace 20)
            (format *error-output* "Error: ~A~%" condition)
            (quit)))
    (load script)
    (quit)))
